// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: hr.proto

package black_list

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HRService_Create_FullMethodName = "/black_list.HRService/Create"
	HRService_Get_FullMethodName    = "/black_list.HRService/Get"
	HRService_GetAll_FullMethodName = "/black_list.HRService/GetAll"
	HRService_Update_FullMethodName = "/black_list.HRService/Update"
	HRService_Delete_FullMethodName = "/black_list.HRService/Delete"
)

// HRServiceClient is the client API for HRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HRServiceClient interface {
	Create(ctx context.Context, in *EmployeeCreate, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Employee, error)
	GetAll(ctx context.Context, in *ListEmployeeReq, opts ...grpc.CallOption) (*ListEmployeeRes, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
}

type hRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHRServiceClient(cc grpc.ClientConnInterface) HRServiceClient {
	return &hRServiceClient{cc}
}

func (c *hRServiceClient) Create(ctx context.Context, in *EmployeeCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HRService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Employee, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Employee)
	err := c.cc.Invoke(ctx, HRService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetAll(ctx context.Context, in *ListEmployeeReq, opts ...grpc.CallOption) (*ListEmployeeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeRes)
	err := c.cc.Invoke(ctx, HRService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HRService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HRService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HRServiceServer is the server API for HRService service.
// All implementations must embed UnimplementedHRServiceServer
// for forward compatibility.
type HRServiceServer interface {
	Create(context.Context, *EmployeeCreate) (*Void, error)
	Get(context.Context, *GetById) (*Employee, error)
	GetAll(context.Context, *ListEmployeeReq) (*ListEmployeeRes, error)
	Update(context.Context, *UpdateReq) (*Void, error)
	Delete(context.Context, *GetById) (*Void, error)
	mustEmbedUnimplementedHRServiceServer()
}

// UnimplementedHRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHRServiceServer struct{}

func (UnimplementedHRServiceServer) Create(context.Context, *EmployeeCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHRServiceServer) Get(context.Context, *GetById) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHRServiceServer) GetAll(context.Context, *ListEmployeeReq) (*ListEmployeeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedHRServiceServer) Update(context.Context, *UpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHRServiceServer) Delete(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHRServiceServer) mustEmbedUnimplementedHRServiceServer() {}
func (UnimplementedHRServiceServer) testEmbeddedByValue()                   {}

// UnsafeHRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HRServiceServer will
// result in compilation errors.
type UnsafeHRServiceServer interface {
	mustEmbedUnimplementedHRServiceServer()
}

func RegisterHRServiceServer(s grpc.ServiceRegistrar, srv HRServiceServer) {
	// If the following call pancis, it indicates UnimplementedHRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HRService_ServiceDesc, srv)
}

func _HRService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).Create(ctx, req.(*EmployeeCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).Get(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetAll(ctx, req.(*ListEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).Delete(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

// HRService_ServiceDesc is the grpc.ServiceDesc for HRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "black_list.HRService",
	HandlerType: (*HRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HRService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HRService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _HRService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HRService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HRService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hr.proto",
}
